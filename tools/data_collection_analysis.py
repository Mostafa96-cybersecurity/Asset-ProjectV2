#!/usr/bin/env python3
"""
Data Collection Analysis Report
Shows exactly what data your Network Assets Collector gathers from all device types
"""

import sqlite3

def analyze_collected_data():
    print("üéØ COMPLETE DATA COLLECTION ANALYSIS")
    print("="*80)
    
    # Connect to database
    conn = sqlite3.connect('assets.db')
    cursor = conn.cursor()
    
    # Get all columns from the assets table
    cursor.execute("PRAGMA table_info(assets)")
    all_columns = [col[1] for col in cursor.fetchall()]
    
    print("üìä DATABASE SCHEMA - All Available Fields:")
    print("-"*50)
    for i, col in enumerate(all_columns, 1):
        print(f"{i:2}. {col}")
    
    # Analyze data collection by source
    print("\nüîç DATA COLLECTION BY SOURCE:")
    print("-"*50)
    
    cursor.execute("""
        SELECT data_source, 
               COUNT(*) as total_devices,
               COUNT(CASE WHEN firmware_os_version IS NOT NULL AND firmware_os_version != '' THEN 1 END) as has_os,
               COUNT(CASE WHEN model_vendor IS NOT NULL AND model_vendor != '' THEN 1 END) as has_model,
               COUNT(CASE WHEN sn IS NOT NULL AND sn != '' THEN 1 END) as has_serial
        FROM assets 
        GROUP BY data_source 
        ORDER BY total_devices DESC
    """)
    
    sources = cursor.fetchall()
    for source, total, os_count, model_count, serial_count in sources:
        print(f"\nüîß {source}:")
        print(f"   üì± Total Devices: {total}")
        print(f"   üñ•Ô∏è  OS Information: {os_count} ({os_count/total*100:.1f}%)")
        print(f"   üìã Model Information: {model_count} ({model_count/total*100:.1f}%)")
        print(f"   üè∑Ô∏è  Serial Numbers: {serial_count} ({serial_count/total*100:.1f}%)")
    
    # Show sample data for each collection method
    print("\nüìã SAMPLE DATA BY COLLECTION METHOD:")
    print("="*80)
    
    for source, _, _, _, _ in sources:
        print(f"\nüîç Sample from {source}:")
        print("-"*40)
        
        cursor.execute("""
            SELECT hostname, ip_address, device_type, firmware_os_version, model_vendor, sn
            FROM assets 
            WHERE data_source = ? 
            LIMIT 3
        """, (source,))
        
        samples = cursor.fetchall()
        for sample in samples:
            hostname, ip, dev_type, os_ver, model, serial = sample
            print(f"   ‚Ä¢ Host: {hostname or 'N/A':<15} | IP: {ip or 'N/A':<15}")
            print(f"     Type: {dev_type or 'N/A':<12} | OS: {os_ver or 'N/A'}")
            print(f"     Model: {model or 'N/A':<12} | SN: {serial or 'N/A'}")
            print()
    
    conn.close()

def show_collection_capabilities():
    print("\nüöÄ COLLECTION CAPABILITIES BY DEVICE TYPE:")
    print("="*80)
    
    capabilities = {
        "WMI Collection (Windows)": {
            "description": "Comprehensive Windows device information via WMI",
            "data_collected": [
                "‚úÖ Hostname & Domain information",
                "‚úÖ Working User (currently logged in)",
                "‚úÖ Operating System name & version",
                "‚úÖ Hardware manufacturer & model",
                "‚úÖ Serial number & asset tag",
                "‚úÖ CPU information (model, cores, speed)",
                "‚úÖ Installed RAM (total GB)",
                "‚úÖ Storage devices (HDDs, SSDs with sizes)",
                "‚úÖ Network interfaces & IP addresses",
                "‚úÖ Active GPU information",
                "‚úÖ Connected monitors/screens",
                "‚úÖ System SKU & BIOS info",
                "‚úÖ Installed software inventory",
                "‚úÖ Windows services status",
                "‚úÖ System uptime & performance metrics"
            ],
            "device_types": ["Windows Desktops", "Windows Servers", "Windows Laptops"],
            "authentication": "Required (Username/Password or Domain credentials)"
        },
        
        "SSH Collection (Linux/Unix)": {
            "description": "Comprehensive Linux/Unix system information via SSH",
            "data_collected": [
                "‚úÖ Hostname & domain information",
                "‚úÖ Current logged users",
                "‚úÖ Operating System (distribution & version)",
                "‚úÖ Hardware information (dmidecode)",
                "‚úÖ CPU information (/proc/cpuinfo)",
                "‚úÖ Memory information (/proc/meminfo)",
                "‚úÖ Disk usage & filesystem information",
                "‚úÖ Network interfaces & IP configuration",
                "‚úÖ Running processes & services",
                "‚úÖ System uptime & load averages",
                "‚úÖ Installed packages (rpm/deb)",
                "‚úÖ Kernel version & modules",
                "‚úÖ VMware ESXi specific information"
            ],
            "device_types": ["Linux Servers", "Unix Workstations", "VMware ESXi", "Network Appliances"],
            "authentication": "Required (SSH Username/Password or Key)"
        },
        
        "SNMP Collection (Network Devices)": {
            "description": "Network device information via SNMP protocol",
            "data_collected": [
                "‚úÖ System description & name",
                "‚úÖ Device manufacturer & model",
                "‚úÖ Firmware/OS version",
                "‚úÖ Serial numbers (if supported)",
                "‚úÖ Network interface information",
                "‚úÖ IP routing table",
                "‚úÖ System uptime",
                "‚úÖ Memory utilization",
                "‚úÖ CPU utilization (if available)",
                "‚úÖ Storage information",
                "‚úÖ Port status & configuration",
                "‚úÖ VLAN information",
                "‚úÖ Device location (if configured)"
            ],
            "device_types": ["Routers", "Switches", "Firewalls", "Access Points", "Printers", "UPS Systems"],
            "authentication": "Community String (often 'public' for read-only)"
        },
        
        "Smart Display Collection (Credential-less)": {
            "description": "Smart TVs, displays, and IoT devices without authentication",
            "data_collected": [
                "‚úÖ Device IP address & hostname",
                "‚úÖ Open network ports",
                "‚úÖ HTTP server information",
                "‚úÖ UPnP device discovery data",
                "‚úÖ Web interface detection",
                "‚úÖ Brand identification (LG, Samsung, etc.)",
                "‚úÖ Smart TV platform (WebOS, Tizen)",
                "‚úÖ Service discovery (SSDP, mDNS)",
                "‚úÖ MAC address (if available)",
                "‚úÖ Device capabilities",
                "‚úÖ Network services",
                "‚úÖ Basic device fingerprinting"
            ],
            "device_types": ["Smart TVs", "Digital Displays", "IoT Devices", "Smart Appliances", "Media Players"],
            "authentication": "None required (uses public protocols)"
        },
        
        "Network Scanning (Basic Discovery)": {
            "description": "Basic network device discovery and port scanning",
            "data_collected": [
                "‚úÖ Device IP addresses",
                "‚úÖ Hostname resolution (if available)",
                "‚úÖ Open network ports",
                "‚úÖ Service identification",
                "‚úÖ Response time & availability",
                "‚úÖ Operating system fingerprinting",
                "‚úÖ MAC address (local network)",
                "‚úÖ Network topology mapping",
                "‚úÖ Device classification hints"
            ],
            "device_types": ["Any network-connected device"],
            "authentication": "None (uses network protocols)"
        }
    }
    
    for method, info in capabilities.items():
        print(f"\nüîß {method}")
        print(f"üìù {info['description']}")
        print(f"üîê Authentication: {info['authentication']}")
        print(f"üì± Device Types: {', '.join(info['device_types'])}")
        print("\nüìä Data Collected:")
        for data_point in info['data_collected']:
            print(f"   {data_point}")
        print("-" * 60)

def show_database_fields_mapping():
    print("\nüìã DATABASE FIELD MAPPING:")
    print("="*80)
    
    field_mapping = {
        "Core Identity Fields": [
            "id - Unique database identifier",
            "asset_tag - Asset management tag/barcode",
            "hostname - Device network name", 
            "ip_address - Primary IP address",
            "device_type - Classification (server, workstation, etc.)"
        ],
        
        "Hardware Information": [
            "model_vendor - Manufacturer and model",
            "sn - Serial number",
            "firmware_os_version - Operating system/firmware version"
        ],
        
        "Location & Management": [
            "location - Physical location",
            "site - Site/campus identifier", 
            "building - Building identifier",
            "floor - Floor number",
            "room - Room identifier",
            "owner - Device owner/responsible person",
            "department - Owning department"
        ],
        
        "Operational Status": [
            "status - Active/Inactive/Maintenance",
            "notes - Additional information",
            "data_source - Collection method used"
        ],
        
        "Audit Trail": [
            "created_at - Record creation timestamp",
            "created_by - Who created the record",
            "updated_at - Last update timestamp", 
            "updated_by - Who last updated"
        ],
        
        "System Management": [
            "_excel_path - Excel file synchronization",
            "_sheet_name - Excel sheet reference",
            "_sync_pending - Sync status flag",
            "_device_fingerprint - Unique device identifier",
            "_collection_quality - Data quality score",
            "_validation_status - Data validation status",
            "_error_count - Collection error tracking"
        ]
    }
    
    for category, fields in field_mapping.items():
        print(f"\nüìÇ {category}:")
        for field in fields:
            print(f"   ‚Ä¢ {field}")

def main():
    analyze_collected_data()
    show_collection_capabilities()
    show_database_fields_mapping()
    
    print("\nüéØ SUMMARY:")
    print("="*50)
    print("Your Network Assets Collector can gather:")
    print("‚Ä¢ üìä Complete hardware inventory")
    print("‚Ä¢ üñ•Ô∏è  Operating system information") 
    print("‚Ä¢ üåê Network configuration details")
    print("‚Ä¢ üîß Software and service information")
    print("‚Ä¢ üì± Smart device capabilities")
    print("‚Ä¢ üè¢ Asset management data")
    print("‚Ä¢ üìà Performance and utilization metrics")
    print("\nFrom ANY network device - with or without credentials!")

if __name__ == "__main__":
    main()